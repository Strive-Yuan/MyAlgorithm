server:
    port: 9090
spring:
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://101.43.98.156:3306/hub
        username: root
        password: yjhui
    quartz: # quartz相关属性配置
        properties:
            org:
                quartz:
                    scheduler:
                        instanceName: clusteredScheduler
                        instanceId: AUTO
#                    startup-delay: 90s  #90秒后延迟启动 这个很重要，必须要有足够长的时间让你的应用先启动完成后再让 Scheduler启动，
                    jobStore:
                        class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置
                        driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
                        tablePrefix: QRTZ_ #数据库表前缀
                        useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
                        misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
                        clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
                        isClustered: true #打开群集功能
                    threadPool:
                        class: org.quartz.simpl.SimpleThreadPool
                        threadCount: 10
                        threadPriority: 5
                        threadsInheritContextClassLoaderOfInitializingThread: true
        #数据库方式
        job-store-type: jdbc
        #初始化表结构
        jdbc:
           initialize-schema: never

redisson:
    address: redis://101.43.98.156:6379
    password: 123456